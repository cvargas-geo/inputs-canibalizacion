service: cannibalization
frameworkVersion: ">=3.12.0"
configValidationMode: error

provider:
  name: aws
  profile: tecnologia
  timeout: 900 # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds
  runtime: python3.7
  # deploymentBucket: lambda-modelos
  # environment: ${self:custom.settings.${self:custom.stage}}
  environment:
    stage: ${opt:stage,'dev'}
    STAGE: ${sls:stage}
    aws_region: us-east-1
    SERVICE_NAME: ${self:service}
    PG_TARGET_SCHEMA: "aws_migrations"
    S3_BUCKET_DATALAKE: "georesearch-datalake"
    CREATE_ATHENA_TABLE_LAMBDA_NAME: "worker-athena-create-table"
    SOURCE_DB: "prod_countries"
    TARGET_DB: ${self:service}
    DATALAKE_DB: "prod_countries"
    DATALAKE_CRAWLER: "dms_${sls:stage}_georesearch_datalake"
    DELIVERY_PREFIX: "georesearch_deliveries"
    PREFIX_DMS: ""
    QUERY_LIMIT: ""
    WAITING_TIME_IN_SECONDS: 900
    SF_01_NAME_PARALLELIZE_ETLS: workflow_${sls:stage}_${self:service}_parallelize_etls
    SF_02_NAME_DMS_SERVICE: workflow_${sls:stage}_dms_replicacion
    # 5 dias
    EXPIRE_URL_SECONDS: 7776000
  # lambdaHashingVersion: 20201221
  # managedPolicyArns:
  #     - 'arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess'
  # httpApi:
  #     shouldStartNameWithService: true
  #     name: ${sls:stage}

  # Use function versioning (enabled by default)
  versionFunctions: false
  vpc:
    securityGroupIds:
      - sg-039020eb5f5ef8c4a
    subnetIds:
      - subnet-24588852
      - subnet-068b91a2d1ed25081
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Resource: '*'
          Action:
            - "s3:*"
            - "lambda:*"
            - "glue:StartJobRun"
            - "glue:GetTable"
            - "glue:GetTables"
            - "glue:GetPartitions"
            - "glue:UpdateTable"
            - "glue:GetCrawler"
            - "glue:UpdateCrawler"
            - "glue:CreateTable"
            - "glue:DeleteTable"
            - "glue:GetDatabase"
            - "glue:StartCrawler"
            - "athena:StartQueryExecution"
            - "athena:GetQueryExecution"
            - "athena:GetQueryResults"
            - "stepFunctions:StartExecution"
            - "states:StartExecution"
            - "states:DescribeExecution"
            - "xray:PutTraceSegment"
            - "xray:PutTraceSegments"
            - "xray:PutTelemetryRecords"
  apiGateway:
    description: AG for ${self:service} # optional - description of deployment history

    # tracing:
    #   lambda: true

package:
  individually: true
  #  Si desea excluir archivos, puede usar un patr√≥n global con el prefijo ! (https://www.serverless.com/framework/docs/providers/aws/guide/packaging/#patterns)
  patterns:
      - "!./**/*"
      - '!node_modules/**' 
      - '!.requirements/**'
      - '!env/**'
      - '!yml/**'
      - '!README.md'
      - '!package.json'
      - '!package-lock.json'
      - '!requirements.txt'
      - ".requirements.zip"
      - "sql_queries/**"
      - "utils/**"
    # - "!*.md"
    # - "psycopg2/**"
    # - "sql_queries/athena/**.sql"
    # # - "src/**"
    # - "serverless.yml"
    # - "requirements.txt"
    # - "Dockerfile"

plugins:
  - serverless-python-requirements
  - serverless-prune-plugin
  - serverless-step-functions
  # - serverless-athena

custom: ${file(yml/custom.yml)}
resources: ${file(yml/glue_db.yml)}
stepFunctions: ${file(yml/step_functions.yml)}
functions: ${file(yml/functions.yml)}


# this not work - serverless-athena
  # athena:
    # catalog: AwsDataCatalog #optional (default: AwsDataCatalog)
    # databases: # list of your dbs
    #   - name: qa_cannibalization # required, your database name, do not use an existing database, will be dropped in deployement process
    #     catalog: AwsDataCatalog #optional (default: AwsDataCatalog)
    #     output: s3://aws-athena-query-results-958531303673-us-east-1/ # required, your results bucket
    #     description: Default db for ${self:service} api project  # optional, table comment
    #     properties: # optional, db properties
    #       - author: serverless
    #     tables: # list of your tables
    #       - name: qa_table # required, table name
    #         ddl: $(file(resources/athena/qa_table.sql)} # required, DDL containing the CREATE TABLE
    #         keepPartitions: true # force backup and restore partitions
      # - name: prod_cannibalization # required, your database name, do not use an existing database, will be dropped in deployement process
      #   catalog: AwsDataCatalog #optional (default: AwsDataCatalog)
      #   output: s3://aws-athena-query-results-958531303673-us-east-1/ # required, your results bucket
      #   description: Default db for ${self:service} api project  # optional, table comment
      #   properties: # optional, db properties
      #     - author: serverless
      #   tables: # list of your tables
      #     - name: prod_table # required, table name
      #       ddl: $(file(resources/athena/prod_table.sql)} # required, DDL containing the CREATE TABLE
      #       keepPartitions: true # force backup and restore partitions